"use client";import{useFocusRing as Q}from"@react-aria/focus";import{useHover as Y}from"@react-aria/interactions";import R,{Fragment as K,createContext as x,useContext as L,useEffect as j,useMemo as A,useReducer as Z,useRef as b}from"react";import{useActivePress as ee}from'../../hooks/use-active-press.js';import{useEvent as C}from'../../hooks/use-event.js';import{useId as W}from'../../hooks/use-id.js';import{useResolveButtonType as te}from'../../hooks/use-resolve-button-type.js';import{optionalRef as ne,useSyncRefs as O}from'../../hooks/use-sync-refs.js';import{OpenClosedProvider as oe,State as I,useOpenClosed as le}from'../../internal/open-closed.js';import{isDisabledReactIssue7711 as se}from'../../utils/bugs.js';import{match as _}from'../../utils/match.js';import{getOwnerDocument as re}from'../../utils/owner.js';import{RenderFeatures as $,forwardRefWithAs as v,mergeProps as J,render as B,useMergeRefsFn as X}from'../../utils/render.js';import{startTransition as ue}from'../../utils/start-transition.js';import{Keys as g}from'../keyboard.js';var ie=(l=>(l[l.Open=0]="Open",l[l.Closed=1]="Closed",l))(ie||{}),ae=(t=>(t[t.ToggleDisclosure=0]="ToggleDisclosure",t[t.CloseDisclosure=1]="CloseDisclosure",t[t.SetButtonId=2]="SetButtonId",t[t.SetPanelId=3]="SetPanelId",t[t.LinkPanel=4]="LinkPanel",t[t.UnlinkPanel=5]="UnlinkPanel",t))(ae||{});let pe={[0]:e=>({...e,disclosureState:_(e.disclosureState,{[0]:1,[1]:0})}),[1]:e=>e.disclosureState===1?e:{...e,disclosureState:1},[4](e){return e.linkedPanel===!0?e:{...e,linkedPanel:!0}},[5](e){return e.linkedPanel===!1?e:{...e,linkedPanel:!1}},[2](e,n){return e.buttonId===n.buttonId?e:{...e,buttonId:n.buttonId}},[3](e,n){return e.panelId===n.panelId?e:{...e,panelId:n.panelId}}},F=x(null);F.displayName="DisclosureContext";function k(e){let n=L(F);if(n===null){let l=new Error(`<${e} /> is missing a parent <Disclosure /> component.`);throw Error.captureStackTrace&&Error.captureStackTrace(l,k),l}return n}let M=x(null);M.displayName="DisclosureAPIContext";function V(e){let n=L(M);if(n===null){let l=new Error(`<${e} /> is missing a parent <Disclosure /> component.`);throw Error.captureStackTrace&&Error.captureStackTrace(l,V),l}return n}let H=x(null);H.displayName="DisclosurePanelContext";function ce(){return L(H)}function de(e,n){return _(n.type,pe,e,n)}let fe=K;function Te(e,n){let{defaultOpen:l=!1,...i}=e,f=b(null),o=O(n,ne(u=>{f.current=u},e.as===void 0||e.as===K)),t=b(null),d=b(null),r=Z(de,{disclosureState:l?0:1,linkedPanel:!1,buttonRef:d,panelRef:t,buttonId:null,panelId:null}),[{disclosureState:c,buttonId:a},y]=r,p=C(u=>{y({type:1});let D=re(f);if(!D||!a)return;let P=(()=>u?u instanceof HTMLElement?u:u.current instanceof HTMLElement?u.current:D.getElementById(a):D.getElementById(a))();P==null||P.focus()}),m=A(()=>({close:p}),[p]),T=A(()=>({open:c===0,close:p}),[c,p]),S={ref:o};return R.createElement(F.Provider,{value:r},R.createElement(M.Provider,{value:m},R.createElement(oe,{value:_(c,{[0]:I.Open,[1]:I.Closed})},B({ourProps:S,theirProps:i,slot:T,defaultTag:fe,name:"Disclosure"}))))}let De="button";function Pe(e,n){var N,G;let l=W(),{id:i=`headlessui-disclosure-button-${l}`,...f}=e,[o,t]=k("Disclosure.Button"),d=ce(),r=d===null?!1:d===o.panelId,c=b(null),a=O(c,n,r?null:o.buttonRef),y=X();j(()=>{if(!r)return t({type:2,buttonId:i}),()=>{t({type:2,buttonId:null})}},[i,t,r]);let p=C(s=>{var E;if(r){if(o.disclosureState===1)return;switch(s.key){case g.Space:case g.Enter:s.preventDefault(),s.stopPropagation(),t({type:0}),(E=o.buttonRef.current)==null||E.focus();break}}else switch(s.key){case g.Space:case g.Enter:s.preventDefault(),s.stopPropagation(),t({type:0});break}}),m=C(s=>{switch(s.key){case g.Space:s.preventDefault();break}}),T=C(s=>{var E;se(s.currentTarget)||e.disabled||(r?(t({type:0}),(E=o.buttonRef.current)==null||E.focus()):t({type:0}))}),{isFocusVisible:S,focusProps:u}=Q({autoFocus:(N=e.autoFocus)!=null?N:!1}),{isHovered:D,hoverProps:P}=Y({isDisabled:(G=e.disabled)!=null?G:!1}),{pressed:U,pressProps:h}=ee(),q=A(()=>{var s;return{open:o.disclosureState===0,hover:D,active:U,focus:S,autofocus:(s=e.autoFocus)!=null?s:!1}},[o,D,U,S,e.autoFocus]),w=te(e,c),z=r?J({ref:a,type:w,onKeyDown:p,onClick:T},u,P,h):J({ref:a,id:i,type:w,"aria-expanded":o.disclosureState===0,"aria-controls":o.linkedPanel?o.panelId:void 0,onKeyDown:p,onKeyUp:m,onClick:T},u,P,h);return B({mergeRefs:y,ourProps:z,theirProps:f,slot:q,defaultTag:De,name:"Disclosure.Button"})}let ye="div",me=$.RenderStrategy|$.Static;function Ee(e,n){let l=W(),{id:i=`headlessui-disclosure-panel-${l}`,...f}=e,[o,t]=k("Disclosure.Panel"),{close:d}=V("Disclosure.Panel"),r=X(),c=O(n,o.panelRef,T=>{ue(()=>t({type:T?4:5}))});j(()=>(t({type:3,panelId:i}),()=>{t({type:3,panelId:null})}),[i,t]);let a=le(),y=(()=>a!==null?(a&I.Open)===I.Open:o.disclosureState===0)(),p=A(()=>({open:o.disclosureState===0,close:d}),[o,d]),m={ref:c,id:i};return R.createElement(H.Provider,{value:o.panelId},B({mergeRefs:r,ourProps:m,theirProps:f,slot:p,defaultTag:ye,features:me,visible:y,name:"Disclosure.Panel"}))}let ge=v(Te),Se=v(Pe),Re=v(Ee),he=Object.assign(ge,{Button:Se,Panel:Re});export{he as Disclosure,Se as DisclosureButton,Re as DisclosurePanel};
